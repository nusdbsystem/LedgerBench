// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vr-proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vr_2dproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vr_2dproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "request.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vr_2dproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vr_2dproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vr_2dproto_2eproto;
namespace replication {
namespace vr {
namespace proto {
class CommitMessage;
class CommitMessageDefaultTypeInternal;
extern CommitMessageDefaultTypeInternal _CommitMessage_default_instance_;
class DoViewChangeMessage;
class DoViewChangeMessageDefaultTypeInternal;
extern DoViewChangeMessageDefaultTypeInternal _DoViewChangeMessage_default_instance_;
class DoViewChangeMessage_LogEntry;
class DoViewChangeMessage_LogEntryDefaultTypeInternal;
extern DoViewChangeMessage_LogEntryDefaultTypeInternal _DoViewChangeMessage_LogEntry_default_instance_;
class PrepareMessage;
class PrepareMessageDefaultTypeInternal;
extern PrepareMessageDefaultTypeInternal _PrepareMessage_default_instance_;
class PrepareOKMessage;
class PrepareOKMessageDefaultTypeInternal;
extern PrepareOKMessageDefaultTypeInternal _PrepareOKMessage_default_instance_;
class ReplyMessage;
class ReplyMessageDefaultTypeInternal;
extern ReplyMessageDefaultTypeInternal _ReplyMessage_default_instance_;
class RequestMessage;
class RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class RequestStateTransferMessage;
class RequestStateTransferMessageDefaultTypeInternal;
extern RequestStateTransferMessageDefaultTypeInternal _RequestStateTransferMessage_default_instance_;
class StartViewChangeMessage;
class StartViewChangeMessageDefaultTypeInternal;
extern StartViewChangeMessageDefaultTypeInternal _StartViewChangeMessage_default_instance_;
class StartViewMessage;
class StartViewMessageDefaultTypeInternal;
extern StartViewMessageDefaultTypeInternal _StartViewMessage_default_instance_;
class StartViewMessage_LogEntry;
class StartViewMessage_LogEntryDefaultTypeInternal;
extern StartViewMessage_LogEntryDefaultTypeInternal _StartViewMessage_LogEntry_default_instance_;
class StateTransferMessage;
class StateTransferMessageDefaultTypeInternal;
extern StateTransferMessageDefaultTypeInternal _StateTransferMessage_default_instance_;
class StateTransferMessage_LogEntry;
class StateTransferMessage_LogEntryDefaultTypeInternal;
extern StateTransferMessage_LogEntryDefaultTypeInternal _StateTransferMessage_LogEntry_default_instance_;
class UnloggedReplyMessage;
class UnloggedReplyMessageDefaultTypeInternal;
extern UnloggedReplyMessageDefaultTypeInternal _UnloggedReplyMessage_default_instance_;
class UnloggedRequestMessage;
class UnloggedRequestMessageDefaultTypeInternal;
extern UnloggedRequestMessageDefaultTypeInternal _UnloggedRequestMessage_default_instance_;
}  // namespace proto
}  // namespace vr
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> ::replication::vr::proto::CommitMessage* Arena::CreateMaybeMessage<::replication::vr::proto::CommitMessage>(Arena*);
template<> ::replication::vr::proto::DoViewChangeMessage* Arena::CreateMaybeMessage<::replication::vr::proto::DoViewChangeMessage>(Arena*);
template<> ::replication::vr::proto::DoViewChangeMessage_LogEntry* Arena::CreateMaybeMessage<::replication::vr::proto::DoViewChangeMessage_LogEntry>(Arena*);
template<> ::replication::vr::proto::PrepareMessage* Arena::CreateMaybeMessage<::replication::vr::proto::PrepareMessage>(Arena*);
template<> ::replication::vr::proto::PrepareOKMessage* Arena::CreateMaybeMessage<::replication::vr::proto::PrepareOKMessage>(Arena*);
template<> ::replication::vr::proto::ReplyMessage* Arena::CreateMaybeMessage<::replication::vr::proto::ReplyMessage>(Arena*);
template<> ::replication::vr::proto::RequestMessage* Arena::CreateMaybeMessage<::replication::vr::proto::RequestMessage>(Arena*);
template<> ::replication::vr::proto::RequestStateTransferMessage* Arena::CreateMaybeMessage<::replication::vr::proto::RequestStateTransferMessage>(Arena*);
template<> ::replication::vr::proto::StartViewChangeMessage* Arena::CreateMaybeMessage<::replication::vr::proto::StartViewChangeMessage>(Arena*);
template<> ::replication::vr::proto::StartViewMessage* Arena::CreateMaybeMessage<::replication::vr::proto::StartViewMessage>(Arena*);
template<> ::replication::vr::proto::StartViewMessage_LogEntry* Arena::CreateMaybeMessage<::replication::vr::proto::StartViewMessage_LogEntry>(Arena*);
template<> ::replication::vr::proto::StateTransferMessage* Arena::CreateMaybeMessage<::replication::vr::proto::StateTransferMessage>(Arena*);
template<> ::replication::vr::proto::StateTransferMessage_LogEntry* Arena::CreateMaybeMessage<::replication::vr::proto::StateTransferMessage_LogEntry>(Arena*);
template<> ::replication::vr::proto::UnloggedReplyMessage* Arena::CreateMaybeMessage<::replication::vr::proto::UnloggedReplyMessage>(Arena*);
template<> ::replication::vr::proto::UnloggedRequestMessage* Arena::CreateMaybeMessage<::replication::vr::proto::UnloggedRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace replication {
namespace vr {
namespace proto {

// ===================================================================

class RequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const final {
    return CreateMaybeMessage<RequestMessage>(nullptr);
  }

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // required .replication.Request req = 1;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::replication::Request& req() const;
  ::replication::Request* release_req();
  ::replication::Request* mutable_req();
  void set_allocated_req(::replication::Request* req);
  private:
  const ::replication::Request& _internal_req() const;
  ::replication::Request* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::replication::Request* req);
  ::replication::Request* unsafe_arena_release_req();

  // @@protoc_insertion_point(class_scope:replication.vr.proto.RequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::replication::Request* req_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class ReplyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.ReplyMessage) */ {
 public:
  inline ReplyMessage() : ReplyMessage(nullptr) {}
  virtual ~ReplyMessage();

  ReplyMessage(const ReplyMessage& from);
  ReplyMessage(ReplyMessage&& from) noexcept
    : ReplyMessage() {
    *this = ::std::move(from);
  }

  inline ReplyMessage& operator=(const ReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyMessage& operator=(ReplyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyMessage* internal_default_instance() {
    return reinterpret_cast<const ReplyMessage*>(
               &_ReplyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReplyMessage& a, ReplyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyMessage* New() const final {
    return CreateMaybeMessage<ReplyMessage>(nullptr);
  }

  ReplyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyMessage& from);
  void MergeFrom(const ReplyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.ReplyMessage";
  }
  protected:
  explicit ReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 4,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kClientreqidFieldNumber = 3,
  };
  // required bytes reply = 4;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const void* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 clientreqid = 3;
  bool has_clientreqid() const;
  private:
  bool _internal_has_clientreqid() const;
  public:
  void clear_clientreqid();
  ::PROTOBUF_NAMESPACE_ID::uint64 clientreqid() const;
  void set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clientreqid() const;
  void _internal_set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.ReplyMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clientreqid_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class UnloggedRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.UnloggedRequestMessage) */ {
 public:
  inline UnloggedRequestMessage() : UnloggedRequestMessage(nullptr) {}
  virtual ~UnloggedRequestMessage();

  UnloggedRequestMessage(const UnloggedRequestMessage& from);
  UnloggedRequestMessage(UnloggedRequestMessage&& from) noexcept
    : UnloggedRequestMessage() {
    *this = ::std::move(from);
  }

  inline UnloggedRequestMessage& operator=(const UnloggedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnloggedRequestMessage& operator=(UnloggedRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnloggedRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnloggedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UnloggedRequestMessage*>(
               &_UnloggedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnloggedRequestMessage& a, UnloggedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnloggedRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnloggedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnloggedRequestMessage* New() const final {
    return CreateMaybeMessage<UnloggedRequestMessage>(nullptr);
  }

  UnloggedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnloggedRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnloggedRequestMessage& from);
  void MergeFrom(const UnloggedRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnloggedRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.UnloggedRequestMessage";
  }
  protected:
  explicit UnloggedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // required .replication.UnloggedRequest req = 1;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::replication::UnloggedRequest& req() const;
  ::replication::UnloggedRequest* release_req();
  ::replication::UnloggedRequest* mutable_req();
  void set_allocated_req(::replication::UnloggedRequest* req);
  private:
  const ::replication::UnloggedRequest& _internal_req() const;
  ::replication::UnloggedRequest* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::replication::UnloggedRequest* req);
  ::replication::UnloggedRequest* unsafe_arena_release_req();

  // @@protoc_insertion_point(class_scope:replication.vr.proto.UnloggedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::replication::UnloggedRequest* req_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class UnloggedReplyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.UnloggedReplyMessage) */ {
 public:
  inline UnloggedReplyMessage() : UnloggedReplyMessage(nullptr) {}
  virtual ~UnloggedReplyMessage();

  UnloggedReplyMessage(const UnloggedReplyMessage& from);
  UnloggedReplyMessage(UnloggedReplyMessage&& from) noexcept
    : UnloggedReplyMessage() {
    *this = ::std::move(from);
  }

  inline UnloggedReplyMessage& operator=(const UnloggedReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnloggedReplyMessage& operator=(UnloggedReplyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnloggedReplyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnloggedReplyMessage* internal_default_instance() {
    return reinterpret_cast<const UnloggedReplyMessage*>(
               &_UnloggedReplyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnloggedReplyMessage& a, UnloggedReplyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnloggedReplyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnloggedReplyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnloggedReplyMessage* New() const final {
    return CreateMaybeMessage<UnloggedReplyMessage>(nullptr);
  }

  UnloggedReplyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnloggedReplyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnloggedReplyMessage& from);
  void MergeFrom(const UnloggedReplyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnloggedReplyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.UnloggedReplyMessage";
  }
  protected:
  explicit UnloggedReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kClientreqidFieldNumber = 2,
  };
  // required bytes reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const void* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // required uint64 clientreqid = 2;
  bool has_clientreqid() const;
  private:
  bool _internal_has_clientreqid() const;
  public:
  void clear_clientreqid();
  ::PROTOBUF_NAMESPACE_ID::uint64 clientreqid() const;
  void set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clientreqid() const;
  void _internal_set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.UnloggedReplyMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clientreqid_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class PrepareMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.PrepareMessage) */ {
 public:
  inline PrepareMessage() : PrepareMessage(nullptr) {}
  virtual ~PrepareMessage();

  PrepareMessage(const PrepareMessage& from);
  PrepareMessage(PrepareMessage&& from) noexcept
    : PrepareMessage() {
    *this = ::std::move(from);
  }

  inline PrepareMessage& operator=(const PrepareMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareMessage& operator=(PrepareMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareMessage* internal_default_instance() {
    return reinterpret_cast<const PrepareMessage*>(
               &_PrepareMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrepareMessage& a, PrepareMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareMessage* New() const final {
    return CreateMaybeMessage<PrepareMessage>(nullptr);
  }

  PrepareMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareMessage& from);
  void MergeFrom(const PrepareMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.PrepareMessage";
  }
  protected:
  explicit PrepareMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 4,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kBatchstartFieldNumber = 3,
  };
  // repeated .replication.Request request = 4;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::replication::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::Request >*
      mutable_request();
  private:
  const ::replication::Request& _internal_request(int index) const;
  ::replication::Request* _internal_add_request();
  public:
  const ::replication::Request& request(int index) const;
  ::replication::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::Request >&
      request() const;

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 batchstart = 3;
  bool has_batchstart() const;
  private:
  bool _internal_has_batchstart() const;
  public:
  void clear_batchstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 batchstart() const;
  void set_batchstart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batchstart() const;
  void _internal_set_batchstart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.PrepareMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::Request > request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 batchstart_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class PrepareOKMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.PrepareOKMessage) */ {
 public:
  inline PrepareOKMessage() : PrepareOKMessage(nullptr) {}
  virtual ~PrepareOKMessage();

  PrepareOKMessage(const PrepareOKMessage& from);
  PrepareOKMessage(PrepareOKMessage&& from) noexcept
    : PrepareOKMessage() {
    *this = ::std::move(from);
  }

  inline PrepareOKMessage& operator=(const PrepareOKMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareOKMessage& operator=(PrepareOKMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareOKMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareOKMessage* internal_default_instance() {
    return reinterpret_cast<const PrepareOKMessage*>(
               &_PrepareOKMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrepareOKMessage& a, PrepareOKMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareOKMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareOKMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareOKMessage* New() const final {
    return CreateMaybeMessage<PrepareOKMessage>(nullptr);
  }

  PrepareOKMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareOKMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareOKMessage& from);
  void MergeFrom(const PrepareOKMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareOKMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.PrepareOKMessage";
  }
  protected:
  explicit PrepareOKMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kReplicaIdxFieldNumber = 3,
  };
  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 replicaIdx = 3;
  bool has_replicaidx() const;
  private:
  bool _internal_has_replicaidx() const;
  public:
  void clear_replicaidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx() const;
  void set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replicaidx() const;
  void _internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.PrepareOKMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class CommitMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.CommitMessage) */ {
 public:
  inline CommitMessage() : CommitMessage(nullptr) {}
  virtual ~CommitMessage();

  CommitMessage(const CommitMessage& from);
  CommitMessage(CommitMessage&& from) noexcept
    : CommitMessage() {
    *this = ::std::move(from);
  }

  inline CommitMessage& operator=(const CommitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitMessage& operator=(CommitMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitMessage* internal_default_instance() {
    return reinterpret_cast<const CommitMessage*>(
               &_CommitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommitMessage& a, CommitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitMessage* New() const final {
    return CreateMaybeMessage<CommitMessage>(nullptr);
  }

  CommitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitMessage& from);
  void MergeFrom(const CommitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.CommitMessage";
  }
  protected:
  explicit CommitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
  };
  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.CommitMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class RequestStateTransferMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.RequestStateTransferMessage) */ {
 public:
  inline RequestStateTransferMessage() : RequestStateTransferMessage(nullptr) {}
  virtual ~RequestStateTransferMessage();

  RequestStateTransferMessage(const RequestStateTransferMessage& from);
  RequestStateTransferMessage(RequestStateTransferMessage&& from) noexcept
    : RequestStateTransferMessage() {
    *this = ::std::move(from);
  }

  inline RequestStateTransferMessage& operator=(const RequestStateTransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestStateTransferMessage& operator=(RequestStateTransferMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestStateTransferMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestStateTransferMessage* internal_default_instance() {
    return reinterpret_cast<const RequestStateTransferMessage*>(
               &_RequestStateTransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestStateTransferMessage& a, RequestStateTransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestStateTransferMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestStateTransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestStateTransferMessage* New() const final {
    return CreateMaybeMessage<RequestStateTransferMessage>(nullptr);
  }

  RequestStateTransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestStateTransferMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestStateTransferMessage& from);
  void MergeFrom(const RequestStateTransferMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStateTransferMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.RequestStateTransferMessage";
  }
  protected:
  explicit RequestStateTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
  };
  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.RequestStateTransferMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class StateTransferMessage_LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.StateTransferMessage.LogEntry) */ {
 public:
  inline StateTransferMessage_LogEntry() : StateTransferMessage_LogEntry(nullptr) {}
  virtual ~StateTransferMessage_LogEntry();

  StateTransferMessage_LogEntry(const StateTransferMessage_LogEntry& from);
  StateTransferMessage_LogEntry(StateTransferMessage_LogEntry&& from) noexcept
    : StateTransferMessage_LogEntry() {
    *this = ::std::move(from);
  }

  inline StateTransferMessage_LogEntry& operator=(const StateTransferMessage_LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateTransferMessage_LogEntry& operator=(StateTransferMessage_LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateTransferMessage_LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateTransferMessage_LogEntry* internal_default_instance() {
    return reinterpret_cast<const StateTransferMessage_LogEntry*>(
               &_StateTransferMessage_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StateTransferMessage_LogEntry& a, StateTransferMessage_LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StateTransferMessage_LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateTransferMessage_LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateTransferMessage_LogEntry* New() const final {
    return CreateMaybeMessage<StateTransferMessage_LogEntry>(nullptr);
  }

  StateTransferMessage_LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateTransferMessage_LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateTransferMessage_LogEntry& from);
  void MergeFrom(const StateTransferMessage_LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateTransferMessage_LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.StateTransferMessage.LogEntry";
  }
  protected:
  explicit StateTransferMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 5,
    kRequestFieldNumber = 3,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // optional bytes hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // required .replication.Request request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::replication::Request& request() const;
  ::replication::Request* release_request();
  ::replication::Request* mutable_request();
  void set_allocated_request(::replication::Request* request);
  private:
  const ::replication::Request& _internal_request() const;
  ::replication::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::replication::Request* request);
  ::replication::Request* unsafe_arena_release_request();

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.StateTransferMessage.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::replication::Request* request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class StateTransferMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.StateTransferMessage) */ {
 public:
  inline StateTransferMessage() : StateTransferMessage(nullptr) {}
  virtual ~StateTransferMessage();

  StateTransferMessage(const StateTransferMessage& from);
  StateTransferMessage(StateTransferMessage&& from) noexcept
    : StateTransferMessage() {
    *this = ::std::move(from);
  }

  inline StateTransferMessage& operator=(const StateTransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateTransferMessage& operator=(StateTransferMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateTransferMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateTransferMessage* internal_default_instance() {
    return reinterpret_cast<const StateTransferMessage*>(
               &_StateTransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StateTransferMessage& a, StateTransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StateTransferMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateTransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateTransferMessage* New() const final {
    return CreateMaybeMessage<StateTransferMessage>(nullptr);
  }

  StateTransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateTransferMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateTransferMessage& from);
  void MergeFrom(const StateTransferMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateTransferMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.StateTransferMessage";
  }
  protected:
  explicit StateTransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StateTransferMessage_LogEntry LogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
  };
  // repeated .replication.vr.proto.StateTransferMessage.LogEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::replication::vr::proto::StateTransferMessage_LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StateTransferMessage_LogEntry >*
      mutable_entries();
  private:
  const ::replication::vr::proto::StateTransferMessage_LogEntry& _internal_entries(int index) const;
  ::replication::vr::proto::StateTransferMessage_LogEntry* _internal_add_entries();
  public:
  const ::replication::vr::proto::StateTransferMessage_LogEntry& entries(int index) const;
  ::replication::vr::proto::StateTransferMessage_LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StateTransferMessage_LogEntry >&
      entries() const;

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.StateTransferMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StateTransferMessage_LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class StartViewChangeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.StartViewChangeMessage) */ {
 public:
  inline StartViewChangeMessage() : StartViewChangeMessage(nullptr) {}
  virtual ~StartViewChangeMessage();

  StartViewChangeMessage(const StartViewChangeMessage& from);
  StartViewChangeMessage(StartViewChangeMessage&& from) noexcept
    : StartViewChangeMessage() {
    *this = ::std::move(from);
  }

  inline StartViewChangeMessage& operator=(const StartViewChangeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartViewChangeMessage& operator=(StartViewChangeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartViewChangeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartViewChangeMessage* internal_default_instance() {
    return reinterpret_cast<const StartViewChangeMessage*>(
               &_StartViewChangeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StartViewChangeMessage& a, StartViewChangeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StartViewChangeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartViewChangeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartViewChangeMessage* New() const final {
    return CreateMaybeMessage<StartViewChangeMessage>(nullptr);
  }

  StartViewChangeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartViewChangeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartViewChangeMessage& from);
  void MergeFrom(const StartViewChangeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartViewChangeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.StartViewChangeMessage";
  }
  protected:
  explicit StartViewChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kLastCommittedFieldNumber = 3,
    kReplicaIdxFieldNumber = 2,
  };
  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastCommitted = 3;
  bool has_lastcommitted() const;
  private:
  bool _internal_has_lastcommitted() const;
  public:
  void clear_lastcommitted();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted() const;
  void set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastcommitted() const;
  void _internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 replicaIdx = 2;
  bool has_replicaidx() const;
  private:
  bool _internal_has_replicaidx() const;
  public:
  void clear_replicaidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx() const;
  void set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replicaidx() const;
  void _internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.StartViewChangeMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class DoViewChangeMessage_LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.DoViewChangeMessage.LogEntry) */ {
 public:
  inline DoViewChangeMessage_LogEntry() : DoViewChangeMessage_LogEntry(nullptr) {}
  virtual ~DoViewChangeMessage_LogEntry();

  DoViewChangeMessage_LogEntry(const DoViewChangeMessage_LogEntry& from);
  DoViewChangeMessage_LogEntry(DoViewChangeMessage_LogEntry&& from) noexcept
    : DoViewChangeMessage_LogEntry() {
    *this = ::std::move(from);
  }

  inline DoViewChangeMessage_LogEntry& operator=(const DoViewChangeMessage_LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoViewChangeMessage_LogEntry& operator=(DoViewChangeMessage_LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoViewChangeMessage_LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoViewChangeMessage_LogEntry* internal_default_instance() {
    return reinterpret_cast<const DoViewChangeMessage_LogEntry*>(
               &_DoViewChangeMessage_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DoViewChangeMessage_LogEntry& a, DoViewChangeMessage_LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DoViewChangeMessage_LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoViewChangeMessage_LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoViewChangeMessage_LogEntry* New() const final {
    return CreateMaybeMessage<DoViewChangeMessage_LogEntry>(nullptr);
  }

  DoViewChangeMessage_LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoViewChangeMessage_LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoViewChangeMessage_LogEntry& from);
  void MergeFrom(const DoViewChangeMessage_LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoViewChangeMessage_LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.DoViewChangeMessage.LogEntry";
  }
  protected:
  explicit DoViewChangeMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 5,
    kRequestFieldNumber = 3,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // optional bytes hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // required .replication.Request request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::replication::Request& request() const;
  ::replication::Request* release_request();
  ::replication::Request* mutable_request();
  void set_allocated_request(::replication::Request* request);
  private:
  const ::replication::Request& _internal_request() const;
  ::replication::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::replication::Request* request);
  ::replication::Request* unsafe_arena_release_request();

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.DoViewChangeMessage.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::replication::Request* request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class DoViewChangeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.DoViewChangeMessage) */ {
 public:
  inline DoViewChangeMessage() : DoViewChangeMessage(nullptr) {}
  virtual ~DoViewChangeMessage();

  DoViewChangeMessage(const DoViewChangeMessage& from);
  DoViewChangeMessage(DoViewChangeMessage&& from) noexcept
    : DoViewChangeMessage() {
    *this = ::std::move(from);
  }

  inline DoViewChangeMessage& operator=(const DoViewChangeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoViewChangeMessage& operator=(DoViewChangeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoViewChangeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoViewChangeMessage* internal_default_instance() {
    return reinterpret_cast<const DoViewChangeMessage*>(
               &_DoViewChangeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DoViewChangeMessage& a, DoViewChangeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoViewChangeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoViewChangeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoViewChangeMessage* New() const final {
    return CreateMaybeMessage<DoViewChangeMessage>(nullptr);
  }

  DoViewChangeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoViewChangeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoViewChangeMessage& from);
  void MergeFrom(const DoViewChangeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoViewChangeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.DoViewChangeMessage";
  }
  protected:
  explicit DoViewChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DoViewChangeMessage_LogEntry LogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kViewFieldNumber = 1,
    kLastNormalViewFieldNumber = 2,
    kLastOpFieldNumber = 3,
    kLastCommittedFieldNumber = 4,
    kReplicaIdxFieldNumber = 6,
  };
  // repeated .replication.vr.proto.DoViewChangeMessage.LogEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::replication::vr::proto::DoViewChangeMessage_LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::DoViewChangeMessage_LogEntry >*
      mutable_entries();
  private:
  const ::replication::vr::proto::DoViewChangeMessage_LogEntry& _internal_entries(int index) const;
  ::replication::vr::proto::DoViewChangeMessage_LogEntry* _internal_add_entries();
  public:
  const ::replication::vr::proto::DoViewChangeMessage_LogEntry& entries(int index) const;
  ::replication::vr::proto::DoViewChangeMessage_LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::DoViewChangeMessage_LogEntry >&
      entries() const;

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastNormalView = 2;
  bool has_lastnormalview() const;
  private:
  bool _internal_has_lastnormalview() const;
  public:
  void clear_lastnormalview();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastnormalview() const;
  void set_lastnormalview(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastnormalview() const;
  void _internal_set_lastnormalview(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastOp = 3;
  bool has_lastop() const;
  private:
  bool _internal_has_lastop() const;
  public:
  void clear_lastop();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastop() const;
  void set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastop() const;
  void _internal_set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastCommitted = 4;
  bool has_lastcommitted() const;
  private:
  bool _internal_has_lastcommitted() const;
  public:
  void clear_lastcommitted();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted() const;
  void set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastcommitted() const;
  void _internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 replicaIdx = 6;
  bool has_replicaidx() const;
  private:
  bool _internal_has_replicaidx() const;
  public:
  void clear_replicaidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx() const;
  void set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replicaidx() const;
  void _internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.DoViewChangeMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::DoViewChangeMessage_LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastnormalview_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastop_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replicaidx_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class StartViewMessage_LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.StartViewMessage.LogEntry) */ {
 public:
  inline StartViewMessage_LogEntry() : StartViewMessage_LogEntry(nullptr) {}
  virtual ~StartViewMessage_LogEntry();

  StartViewMessage_LogEntry(const StartViewMessage_LogEntry& from);
  StartViewMessage_LogEntry(StartViewMessage_LogEntry&& from) noexcept
    : StartViewMessage_LogEntry() {
    *this = ::std::move(from);
  }

  inline StartViewMessage_LogEntry& operator=(const StartViewMessage_LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartViewMessage_LogEntry& operator=(StartViewMessage_LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartViewMessage_LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartViewMessage_LogEntry* internal_default_instance() {
    return reinterpret_cast<const StartViewMessage_LogEntry*>(
               &_StartViewMessage_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StartViewMessage_LogEntry& a, StartViewMessage_LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StartViewMessage_LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartViewMessage_LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartViewMessage_LogEntry* New() const final {
    return CreateMaybeMessage<StartViewMessage_LogEntry>(nullptr);
  }

  StartViewMessage_LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartViewMessage_LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartViewMessage_LogEntry& from);
  void MergeFrom(const StartViewMessage_LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartViewMessage_LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.StartViewMessage.LogEntry";
  }
  protected:
  explicit StartViewMessage_LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 5,
    kRequestFieldNumber = 3,
    kViewFieldNumber = 1,
    kOpnumFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // optional bytes hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // required .replication.Request request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::replication::Request& request() const;
  ::replication::Request* release_request();
  ::replication::Request* mutable_request();
  void set_allocated_request(::replication::Request* request);
  private:
  const ::replication::Request& _internal_request() const;
  ::replication::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::replication::Request* request);
  ::replication::Request* unsafe_arena_release_request();

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 opnum = 2;
  bool has_opnum() const;
  private:
  bool _internal_has_opnum() const;
  public:
  void clear_opnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum() const;
  void set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opnum() const;
  void _internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.StartViewMessage.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::replication::Request* request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// -------------------------------------------------------------------

class StartViewMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.vr.proto.StartViewMessage) */ {
 public:
  inline StartViewMessage() : StartViewMessage(nullptr) {}
  virtual ~StartViewMessage();

  StartViewMessage(const StartViewMessage& from);
  StartViewMessage(StartViewMessage&& from) noexcept
    : StartViewMessage() {
    *this = ::std::move(from);
  }

  inline StartViewMessage& operator=(const StartViewMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartViewMessage& operator=(StartViewMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartViewMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartViewMessage* internal_default_instance() {
    return reinterpret_cast<const StartViewMessage*>(
               &_StartViewMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StartViewMessage& a, StartViewMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StartViewMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartViewMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartViewMessage* New() const final {
    return CreateMaybeMessage<StartViewMessage>(nullptr);
  }

  StartViewMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartViewMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartViewMessage& from);
  void MergeFrom(const StartViewMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartViewMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.vr.proto.StartViewMessage";
  }
  protected:
  explicit StartViewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vr_2dproto_2eproto);
    return ::descriptor_table_vr_2dproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartViewMessage_LogEntry LogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 4,
    kViewFieldNumber = 1,
    kLastOpFieldNumber = 2,
    kLastCommittedFieldNumber = 3,
  };
  // repeated .replication.vr.proto.StartViewMessage.LogEntry entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::replication::vr::proto::StartViewMessage_LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StartViewMessage_LogEntry >*
      mutable_entries();
  private:
  const ::replication::vr::proto::StartViewMessage_LogEntry& _internal_entries(int index) const;
  ::replication::vr::proto::StartViewMessage_LogEntry* _internal_add_entries();
  public:
  const ::replication::vr::proto::StartViewMessage_LogEntry& entries(int index) const;
  ::replication::vr::proto::StartViewMessage_LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StartViewMessage_LogEntry >&
      entries() const;

  // required uint64 view = 1;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastOp = 2;
  bool has_lastop() const;
  private:
  bool _internal_has_lastop() const;
  public:
  void clear_lastop();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastop() const;
  void set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastop() const;
  void _internal_set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastCommitted = 3;
  bool has_lastcommitted() const;
  private:
  bool _internal_has_lastcommitted() const;
  public:
  void clear_lastcommitted();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted() const;
  void set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastcommitted() const;
  void _internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replication.vr.proto.StartViewMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StartViewMessage_LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastop_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted_;
  friend struct ::TableStruct_vr_2dproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestMessage

// required .replication.Request req = 1;
inline bool RequestMessage::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool RequestMessage::has_req() const {
  return _internal_has_req();
}
inline const ::replication::Request& RequestMessage::_internal_req() const {
  const ::replication::Request* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::replication::Request*>(
      &::replication::_Request_default_instance_);
}
inline const ::replication::Request& RequestMessage::req() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.RequestMessage.req)
  return _internal_req();
}
inline void RequestMessage::unsafe_arena_set_allocated_req(
    ::replication::Request* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:replication.vr.proto.RequestMessage.req)
}
inline ::replication::Request* RequestMessage::release_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::replication::Request* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::replication::Request* RequestMessage::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.RequestMessage.req)
  _has_bits_[0] &= ~0x00000001u;
  ::replication::Request* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::replication::Request* RequestMessage::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000001u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::replication::Request>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::replication::Request* RequestMessage::mutable_req() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.RequestMessage.req)
  return _internal_mutable_req();
}
inline void RequestMessage::set_allocated_req(::replication::Request* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req)->GetArena();
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.RequestMessage.req)
}

// -------------------------------------------------------------------

// ReplyMessage

// required uint64 view = 1;
inline bool ReplyMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReplyMessage::has_view() const {
  return _internal_has_view();
}
inline void ReplyMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.ReplyMessage.view)
  return _internal_view();
}
inline void ReplyMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  view_ = value;
}
inline void ReplyMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.ReplyMessage.view)
}

// required uint64 opnum = 2;
inline bool ReplyMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReplyMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void ReplyMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.ReplyMessage.opnum)
  return _internal_opnum();
}
inline void ReplyMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  opnum_ = value;
}
inline void ReplyMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.ReplyMessage.opnum)
}

// required uint64 clientreqid = 3;
inline bool ReplyMessage::_internal_has_clientreqid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReplyMessage::has_clientreqid() const {
  return _internal_has_clientreqid();
}
inline void ReplyMessage::clear_clientreqid() {
  clientreqid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::_internal_clientreqid() const {
  return clientreqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReplyMessage::clientreqid() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.ReplyMessage.clientreqid)
  return _internal_clientreqid();
}
inline void ReplyMessage::_internal_set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  clientreqid_ = value;
}
inline void ReplyMessage::set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clientreqid(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.ReplyMessage.clientreqid)
}

// required bytes reply = 4;
inline bool ReplyMessage::_internal_has_reply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReplyMessage::has_reply() const {
  return _internal_has_reply();
}
inline void ReplyMessage::clear_reply() {
  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReplyMessage::reply() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.ReplyMessage.reply)
  return _internal_reply();
}
inline void ReplyMessage::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.ReplyMessage.reply)
}
inline std::string* ReplyMessage::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.ReplyMessage.reply)
  return _internal_mutable_reply();
}
inline const std::string& ReplyMessage::_internal_reply() const {
  return reply_.Get();
}
inline void ReplyMessage::_internal_set_reply(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplyMessage::set_reply(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replication.vr.proto.ReplyMessage.reply)
}
inline void ReplyMessage::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:replication.vr.proto.ReplyMessage.reply)
}
inline void ReplyMessage::set_reply(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replication.vr.proto.ReplyMessage.reply)
}
inline std::string* ReplyMessage::_internal_mutable_reply() {
  _has_bits_[0] |= 0x00000001u;
  return reply_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplyMessage::release_reply() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.ReplyMessage.reply)
  if (!_internal_has_reply()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reply_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplyMessage::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.ReplyMessage.reply)
}

// -------------------------------------------------------------------

// UnloggedRequestMessage

// required .replication.UnloggedRequest req = 1;
inline bool UnloggedRequestMessage::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || req_ != nullptr);
  return value;
}
inline bool UnloggedRequestMessage::has_req() const {
  return _internal_has_req();
}
inline const ::replication::UnloggedRequest& UnloggedRequestMessage::_internal_req() const {
  const ::replication::UnloggedRequest* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::replication::UnloggedRequest*>(
      &::replication::_UnloggedRequest_default_instance_);
}
inline const ::replication::UnloggedRequest& UnloggedRequestMessage::req() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.UnloggedRequestMessage.req)
  return _internal_req();
}
inline void UnloggedRequestMessage::unsafe_arena_set_allocated_req(
    ::replication::UnloggedRequest* req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:replication.vr.proto.UnloggedRequestMessage.req)
}
inline ::replication::UnloggedRequest* UnloggedRequestMessage::release_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::replication::UnloggedRequest* temp = req_;
  req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::replication::UnloggedRequest* UnloggedRequestMessage::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.UnloggedRequestMessage.req)
  _has_bits_[0] &= ~0x00000001u;
  ::replication::UnloggedRequest* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::replication::UnloggedRequest* UnloggedRequestMessage::_internal_mutable_req() {
  _has_bits_[0] |= 0x00000001u;
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::replication::UnloggedRequest>(GetArena());
    req_ = p;
  }
  return req_;
}
inline ::replication::UnloggedRequest* UnloggedRequestMessage::mutable_req() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.UnloggedRequestMessage.req)
  return _internal_mutable_req();
}
inline void UnloggedRequestMessage::set_allocated_req(::replication::UnloggedRequest* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req)->GetArena();
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.UnloggedRequestMessage.req)
}

// -------------------------------------------------------------------

// UnloggedReplyMessage

// required bytes reply = 1;
inline bool UnloggedReplyMessage::_internal_has_reply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnloggedReplyMessage::has_reply() const {
  return _internal_has_reply();
}
inline void UnloggedReplyMessage::clear_reply() {
  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnloggedReplyMessage::reply() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.UnloggedReplyMessage.reply)
  return _internal_reply();
}
inline void UnloggedReplyMessage::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.UnloggedReplyMessage.reply)
}
inline std::string* UnloggedReplyMessage::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.UnloggedReplyMessage.reply)
  return _internal_mutable_reply();
}
inline const std::string& UnloggedReplyMessage::_internal_reply() const {
  return reply_.Get();
}
inline void UnloggedReplyMessage::_internal_set_reply(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnloggedReplyMessage::set_reply(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replication.vr.proto.UnloggedReplyMessage.reply)
}
inline void UnloggedReplyMessage::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:replication.vr.proto.UnloggedReplyMessage.reply)
}
inline void UnloggedReplyMessage::set_reply(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replication.vr.proto.UnloggedReplyMessage.reply)
}
inline std::string* UnloggedReplyMessage::_internal_mutable_reply() {
  _has_bits_[0] |= 0x00000001u;
  return reply_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnloggedReplyMessage::release_reply() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.UnloggedReplyMessage.reply)
  if (!_internal_has_reply()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reply_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnloggedReplyMessage::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.UnloggedReplyMessage.reply)
}

// required uint64 clientreqid = 2;
inline bool UnloggedReplyMessage::_internal_has_clientreqid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnloggedReplyMessage::has_clientreqid() const {
  return _internal_has_clientreqid();
}
inline void UnloggedReplyMessage::clear_clientreqid() {
  clientreqid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnloggedReplyMessage::_internal_clientreqid() const {
  return clientreqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnloggedReplyMessage::clientreqid() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.UnloggedReplyMessage.clientreqid)
  return _internal_clientreqid();
}
inline void UnloggedReplyMessage::_internal_set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  clientreqid_ = value;
}
inline void UnloggedReplyMessage::set_clientreqid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clientreqid(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.UnloggedReplyMessage.clientreqid)
}

// -------------------------------------------------------------------

// PrepareMessage

// required uint64 view = 1;
inline bool PrepareMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrepareMessage::has_view() const {
  return _internal_has_view();
}
inline void PrepareMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareMessage.view)
  return _internal_view();
}
inline void PrepareMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void PrepareMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareMessage.view)
}

// required uint64 opnum = 2;
inline bool PrepareMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrepareMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void PrepareMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareMessage.opnum)
  return _internal_opnum();
}
inline void PrepareMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opnum_ = value;
}
inline void PrepareMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareMessage.opnum)
}

// required uint64 batchstart = 3;
inline bool PrepareMessage::_internal_has_batchstart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrepareMessage::has_batchstart() const {
  return _internal_has_batchstart();
}
inline void PrepareMessage::clear_batchstart() {
  batchstart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::_internal_batchstart() const {
  return batchstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareMessage::batchstart() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareMessage.batchstart)
  return _internal_batchstart();
}
inline void PrepareMessage::_internal_set_batchstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  batchstart_ = value;
}
inline void PrepareMessage::set_batchstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_batchstart(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareMessage.batchstart)
}

// repeated .replication.Request request = 4;
inline int PrepareMessage::_internal_request_size() const {
  return request_.size();
}
inline int PrepareMessage::request_size() const {
  return _internal_request_size();
}
inline ::replication::Request* PrepareMessage::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.PrepareMessage.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::Request >*
PrepareMessage::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:replication.vr.proto.PrepareMessage.request)
  return &request_;
}
inline const ::replication::Request& PrepareMessage::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::replication::Request& PrepareMessage::request(int index) const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareMessage.request)
  return _internal_request(index);
}
inline ::replication::Request* PrepareMessage::_internal_add_request() {
  return request_.Add();
}
inline ::replication::Request* PrepareMessage::add_request() {
  // @@protoc_insertion_point(field_add:replication.vr.proto.PrepareMessage.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::Request >&
PrepareMessage::request() const {
  // @@protoc_insertion_point(field_list:replication.vr.proto.PrepareMessage.request)
  return request_;
}

// -------------------------------------------------------------------

// PrepareOKMessage

// required uint64 view = 1;
inline bool PrepareOKMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrepareOKMessage::has_view() const {
  return _internal_has_view();
}
inline void PrepareOKMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareOKMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareOKMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareOKMessage.view)
  return _internal_view();
}
inline void PrepareOKMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void PrepareOKMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareOKMessage.view)
}

// required uint64 opnum = 2;
inline bool PrepareOKMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrepareOKMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void PrepareOKMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareOKMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrepareOKMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareOKMessage.opnum)
  return _internal_opnum();
}
inline void PrepareOKMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opnum_ = value;
}
inline void PrepareOKMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareOKMessage.opnum)
}

// required uint32 replicaIdx = 3;
inline bool PrepareOKMessage::_internal_has_replicaidx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrepareOKMessage::has_replicaidx() const {
  return _internal_has_replicaidx();
}
inline void PrepareOKMessage::clear_replicaidx() {
  replicaidx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrepareOKMessage::_internal_replicaidx() const {
  return replicaidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrepareOKMessage::replicaidx() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.PrepareOKMessage.replicaIdx)
  return _internal_replicaidx();
}
inline void PrepareOKMessage::_internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  replicaidx_ = value;
}
inline void PrepareOKMessage::set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replicaidx(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.PrepareOKMessage.replicaIdx)
}

// -------------------------------------------------------------------

// CommitMessage

// required uint64 view = 1;
inline bool CommitMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommitMessage::has_view() const {
  return _internal_has_view();
}
inline void CommitMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.CommitMessage.view)
  return _internal_view();
}
inline void CommitMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void CommitMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.CommitMessage.view)
}

// required uint64 opnum = 2;
inline bool CommitMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommitMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void CommitMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.CommitMessage.opnum)
  return _internal_opnum();
}
inline void CommitMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opnum_ = value;
}
inline void CommitMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.CommitMessage.opnum)
}

// -------------------------------------------------------------------

// RequestStateTransferMessage

// required uint64 view = 1;
inline bool RequestStateTransferMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestStateTransferMessage::has_view() const {
  return _internal_has_view();
}
inline void RequestStateTransferMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestStateTransferMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestStateTransferMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.RequestStateTransferMessage.view)
  return _internal_view();
}
inline void RequestStateTransferMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void RequestStateTransferMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.RequestStateTransferMessage.view)
}

// required uint64 opnum = 2;
inline bool RequestStateTransferMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestStateTransferMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void RequestStateTransferMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestStateTransferMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestStateTransferMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.RequestStateTransferMessage.opnum)
  return _internal_opnum();
}
inline void RequestStateTransferMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opnum_ = value;
}
inline void RequestStateTransferMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.RequestStateTransferMessage.opnum)
}

// -------------------------------------------------------------------

// StateTransferMessage_LogEntry

// required uint64 view = 1;
inline bool StateTransferMessage_LogEntry::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StateTransferMessage_LogEntry::has_view() const {
  return _internal_has_view();
}
inline void StateTransferMessage_LogEntry::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage_LogEntry::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage_LogEntry::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.LogEntry.view)
  return _internal_view();
}
inline void StateTransferMessage_LogEntry::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  view_ = value;
}
inline void StateTransferMessage_LogEntry::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.LogEntry.view)
}

// required uint64 opnum = 2;
inline bool StateTransferMessage_LogEntry::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StateTransferMessage_LogEntry::has_opnum() const {
  return _internal_has_opnum();
}
inline void StateTransferMessage_LogEntry::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage_LogEntry::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage_LogEntry::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.LogEntry.opnum)
  return _internal_opnum();
}
inline void StateTransferMessage_LogEntry::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  opnum_ = value;
}
inline void StateTransferMessage_LogEntry::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.LogEntry.opnum)
}

// required .replication.Request request = 3;
inline bool StateTransferMessage_LogEntry::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool StateTransferMessage_LogEntry::has_request() const {
  return _internal_has_request();
}
inline const ::replication::Request& StateTransferMessage_LogEntry::_internal_request() const {
  const ::replication::Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::replication::Request*>(
      &::replication::_Request_default_instance_);
}
inline const ::replication::Request& StateTransferMessage_LogEntry::request() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.LogEntry.request)
  return _internal_request();
}
inline void StateTransferMessage_LogEntry::unsafe_arena_set_allocated_request(
    ::replication::Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:replication.vr.proto.StateTransferMessage.LogEntry.request)
}
inline ::replication::Request* StateTransferMessage_LogEntry::release_request() {
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::replication::Request* StateTransferMessage_LogEntry::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.StateTransferMessage.LogEntry.request)
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::replication::Request* StateTransferMessage_LogEntry::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000002u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::replication::Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::replication::Request* StateTransferMessage_LogEntry::mutable_request() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StateTransferMessage.LogEntry.request)
  return _internal_mutable_request();
}
inline void StateTransferMessage_LogEntry::set_allocated_request(::replication::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.StateTransferMessage.LogEntry.request)
}

// optional uint32 state = 4;
inline bool StateTransferMessage_LogEntry::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StateTransferMessage_LogEntry::has_state() const {
  return _internal_has_state();
}
inline void StateTransferMessage_LogEntry::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateTransferMessage_LogEntry::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateTransferMessage_LogEntry::state() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.LogEntry.state)
  return _internal_state();
}
inline void StateTransferMessage_LogEntry::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  state_ = value;
}
inline void StateTransferMessage_LogEntry::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.LogEntry.state)
}

// optional bytes hash = 5;
inline bool StateTransferMessage_LogEntry::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StateTransferMessage_LogEntry::has_hash() const {
  return _internal_has_hash();
}
inline void StateTransferMessage_LogEntry::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StateTransferMessage_LogEntry::hash() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.LogEntry.hash)
  return _internal_hash();
}
inline void StateTransferMessage_LogEntry::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.LogEntry.hash)
}
inline std::string* StateTransferMessage_LogEntry::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StateTransferMessage.LogEntry.hash)
  return _internal_mutable_hash();
}
inline const std::string& StateTransferMessage_LogEntry::_internal_hash() const {
  return hash_.Get();
}
inline void StateTransferMessage_LogEntry::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StateTransferMessage_LogEntry::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replication.vr.proto.StateTransferMessage.LogEntry.hash)
}
inline void StateTransferMessage_LogEntry::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:replication.vr.proto.StateTransferMessage.LogEntry.hash)
}
inline void StateTransferMessage_LogEntry::set_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replication.vr.proto.StateTransferMessage.LogEntry.hash)
}
inline std::string* StateTransferMessage_LogEntry::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StateTransferMessage_LogEntry::release_hash() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.StateTransferMessage.LogEntry.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateTransferMessage_LogEntry::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.StateTransferMessage.LogEntry.hash)
}

// -------------------------------------------------------------------

// StateTransferMessage

// required uint64 view = 1;
inline bool StateTransferMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StateTransferMessage::has_view() const {
  return _internal_has_view();
}
inline void StateTransferMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.view)
  return _internal_view();
}
inline void StateTransferMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void StateTransferMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.view)
}

// required uint64 opnum = 2;
inline bool StateTransferMessage::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StateTransferMessage::has_opnum() const {
  return _internal_has_opnum();
}
inline void StateTransferMessage::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateTransferMessage::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.opnum)
  return _internal_opnum();
}
inline void StateTransferMessage::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  opnum_ = value;
}
inline void StateTransferMessage::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StateTransferMessage.opnum)
}

// repeated .replication.vr.proto.StateTransferMessage.LogEntry entries = 3;
inline int StateTransferMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int StateTransferMessage::entries_size() const {
  return _internal_entries_size();
}
inline void StateTransferMessage::clear_entries() {
  entries_.Clear();
}
inline ::replication::vr::proto::StateTransferMessage_LogEntry* StateTransferMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StateTransferMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StateTransferMessage_LogEntry >*
StateTransferMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:replication.vr.proto.StateTransferMessage.entries)
  return &entries_;
}
inline const ::replication::vr::proto::StateTransferMessage_LogEntry& StateTransferMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::replication::vr::proto::StateTransferMessage_LogEntry& StateTransferMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StateTransferMessage.entries)
  return _internal_entries(index);
}
inline ::replication::vr::proto::StateTransferMessage_LogEntry* StateTransferMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::replication::vr::proto::StateTransferMessage_LogEntry* StateTransferMessage::add_entries() {
  // @@protoc_insertion_point(field_add:replication.vr.proto.StateTransferMessage.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StateTransferMessage_LogEntry >&
StateTransferMessage::entries() const {
  // @@protoc_insertion_point(field_list:replication.vr.proto.StateTransferMessage.entries)
  return entries_;
}

// -------------------------------------------------------------------

// StartViewChangeMessage

// required uint64 view = 1;
inline bool StartViewChangeMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartViewChangeMessage::has_view() const {
  return _internal_has_view();
}
inline void StartViewChangeMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewChangeMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewChangeMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewChangeMessage.view)
  return _internal_view();
}
inline void StartViewChangeMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void StartViewChangeMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewChangeMessage.view)
}

// required uint32 replicaIdx = 2;
inline bool StartViewChangeMessage::_internal_has_replicaidx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StartViewChangeMessage::has_replicaidx() const {
  return _internal_has_replicaidx();
}
inline void StartViewChangeMessage::clear_replicaidx() {
  replicaidx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartViewChangeMessage::_internal_replicaidx() const {
  return replicaidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartViewChangeMessage::replicaidx() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewChangeMessage.replicaIdx)
  return _internal_replicaidx();
}
inline void StartViewChangeMessage::_internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  replicaidx_ = value;
}
inline void StartViewChangeMessage::set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replicaidx(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewChangeMessage.replicaIdx)
}

// required uint64 lastCommitted = 3;
inline bool StartViewChangeMessage::_internal_has_lastcommitted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StartViewChangeMessage::has_lastcommitted() const {
  return _internal_has_lastcommitted();
}
inline void StartViewChangeMessage::clear_lastcommitted() {
  lastcommitted_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewChangeMessage::_internal_lastcommitted() const {
  return lastcommitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewChangeMessage::lastcommitted() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewChangeMessage.lastCommitted)
  return _internal_lastcommitted();
}
inline void StartViewChangeMessage::_internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lastcommitted_ = value;
}
inline void StartViewChangeMessage::set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastcommitted(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewChangeMessage.lastCommitted)
}

// -------------------------------------------------------------------

// DoViewChangeMessage_LogEntry

// required uint64 view = 1;
inline bool DoViewChangeMessage_LogEntry::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DoViewChangeMessage_LogEntry::has_view() const {
  return _internal_has_view();
}
inline void DoViewChangeMessage_LogEntry::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage_LogEntry::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage_LogEntry::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.LogEntry.view)
  return _internal_view();
}
inline void DoViewChangeMessage_LogEntry::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  view_ = value;
}
inline void DoViewChangeMessage_LogEntry::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.LogEntry.view)
}

// required uint64 opnum = 2;
inline bool DoViewChangeMessage_LogEntry::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DoViewChangeMessage_LogEntry::has_opnum() const {
  return _internal_has_opnum();
}
inline void DoViewChangeMessage_LogEntry::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage_LogEntry::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage_LogEntry::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.LogEntry.opnum)
  return _internal_opnum();
}
inline void DoViewChangeMessage_LogEntry::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  opnum_ = value;
}
inline void DoViewChangeMessage_LogEntry::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.LogEntry.opnum)
}

// required .replication.Request request = 3;
inline bool DoViewChangeMessage_LogEntry::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool DoViewChangeMessage_LogEntry::has_request() const {
  return _internal_has_request();
}
inline const ::replication::Request& DoViewChangeMessage_LogEntry::_internal_request() const {
  const ::replication::Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::replication::Request*>(
      &::replication::_Request_default_instance_);
}
inline const ::replication::Request& DoViewChangeMessage_LogEntry::request() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.LogEntry.request)
  return _internal_request();
}
inline void DoViewChangeMessage_LogEntry::unsafe_arena_set_allocated_request(
    ::replication::Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:replication.vr.proto.DoViewChangeMessage.LogEntry.request)
}
inline ::replication::Request* DoViewChangeMessage_LogEntry::release_request() {
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::replication::Request* DoViewChangeMessage_LogEntry::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.DoViewChangeMessage.LogEntry.request)
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::replication::Request* DoViewChangeMessage_LogEntry::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000002u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::replication::Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::replication::Request* DoViewChangeMessage_LogEntry::mutable_request() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.DoViewChangeMessage.LogEntry.request)
  return _internal_mutable_request();
}
inline void DoViewChangeMessage_LogEntry::set_allocated_request(::replication::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.DoViewChangeMessage.LogEntry.request)
}

// optional uint32 state = 4;
inline bool DoViewChangeMessage_LogEntry::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DoViewChangeMessage_LogEntry::has_state() const {
  return _internal_has_state();
}
inline void DoViewChangeMessage_LogEntry::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoViewChangeMessage_LogEntry::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoViewChangeMessage_LogEntry::state() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.LogEntry.state)
  return _internal_state();
}
inline void DoViewChangeMessage_LogEntry::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  state_ = value;
}
inline void DoViewChangeMessage_LogEntry::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.LogEntry.state)
}

// optional bytes hash = 5;
inline bool DoViewChangeMessage_LogEntry::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoViewChangeMessage_LogEntry::has_hash() const {
  return _internal_has_hash();
}
inline void DoViewChangeMessage_LogEntry::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DoViewChangeMessage_LogEntry::hash() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
  return _internal_hash();
}
inline void DoViewChangeMessage_LogEntry::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
}
inline std::string* DoViewChangeMessage_LogEntry::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
  return _internal_mutable_hash();
}
inline const std::string& DoViewChangeMessage_LogEntry::_internal_hash() const {
  return hash_.Get();
}
inline void DoViewChangeMessage_LogEntry::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DoViewChangeMessage_LogEntry::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
}
inline void DoViewChangeMessage_LogEntry::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
}
inline void DoViewChangeMessage_LogEntry::set_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
}
inline std::string* DoViewChangeMessage_LogEntry::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DoViewChangeMessage_LogEntry::release_hash() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DoViewChangeMessage_LogEntry::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.DoViewChangeMessage.LogEntry.hash)
}

// -------------------------------------------------------------------

// DoViewChangeMessage

// required uint64 view = 1;
inline bool DoViewChangeMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoViewChangeMessage::has_view() const {
  return _internal_has_view();
}
inline void DoViewChangeMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.view)
  return _internal_view();
}
inline void DoViewChangeMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void DoViewChangeMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.view)
}

// required uint64 lastNormalView = 2;
inline bool DoViewChangeMessage::_internal_has_lastnormalview() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoViewChangeMessage::has_lastnormalview() const {
  return _internal_has_lastnormalview();
}
inline void DoViewChangeMessage::clear_lastnormalview() {
  lastnormalview_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::_internal_lastnormalview() const {
  return lastnormalview_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::lastnormalview() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.lastNormalView)
  return _internal_lastnormalview();
}
inline void DoViewChangeMessage::_internal_set_lastnormalview(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lastnormalview_ = value;
}
inline void DoViewChangeMessage::set_lastnormalview(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastnormalview(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.lastNormalView)
}

// required uint64 lastOp = 3;
inline bool DoViewChangeMessage::_internal_has_lastop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DoViewChangeMessage::has_lastop() const {
  return _internal_has_lastop();
}
inline void DoViewChangeMessage::clear_lastop() {
  lastop_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::_internal_lastop() const {
  return lastop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::lastop() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.lastOp)
  return _internal_lastop();
}
inline void DoViewChangeMessage::_internal_set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lastop_ = value;
}
inline void DoViewChangeMessage::set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastop(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.lastOp)
}

// required uint64 lastCommitted = 4;
inline bool DoViewChangeMessage::_internal_has_lastcommitted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DoViewChangeMessage::has_lastcommitted() const {
  return _internal_has_lastcommitted();
}
inline void DoViewChangeMessage::clear_lastcommitted() {
  lastcommitted_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::_internal_lastcommitted() const {
  return lastcommitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoViewChangeMessage::lastcommitted() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.lastCommitted)
  return _internal_lastcommitted();
}
inline void DoViewChangeMessage::_internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lastcommitted_ = value;
}
inline void DoViewChangeMessage::set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastcommitted(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.lastCommitted)
}

// repeated .replication.vr.proto.DoViewChangeMessage.LogEntry entries = 5;
inline int DoViewChangeMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int DoViewChangeMessage::entries_size() const {
  return _internal_entries_size();
}
inline void DoViewChangeMessage::clear_entries() {
  entries_.Clear();
}
inline ::replication::vr::proto::DoViewChangeMessage_LogEntry* DoViewChangeMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.DoViewChangeMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::DoViewChangeMessage_LogEntry >*
DoViewChangeMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:replication.vr.proto.DoViewChangeMessage.entries)
  return &entries_;
}
inline const ::replication::vr::proto::DoViewChangeMessage_LogEntry& DoViewChangeMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::replication::vr::proto::DoViewChangeMessage_LogEntry& DoViewChangeMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.entries)
  return _internal_entries(index);
}
inline ::replication::vr::proto::DoViewChangeMessage_LogEntry* DoViewChangeMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::replication::vr::proto::DoViewChangeMessage_LogEntry* DoViewChangeMessage::add_entries() {
  // @@protoc_insertion_point(field_add:replication.vr.proto.DoViewChangeMessage.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::DoViewChangeMessage_LogEntry >&
DoViewChangeMessage::entries() const {
  // @@protoc_insertion_point(field_list:replication.vr.proto.DoViewChangeMessage.entries)
  return entries_;
}

// required uint32 replicaIdx = 6;
inline bool DoViewChangeMessage::_internal_has_replicaidx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DoViewChangeMessage::has_replicaidx() const {
  return _internal_has_replicaidx();
}
inline void DoViewChangeMessage::clear_replicaidx() {
  replicaidx_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoViewChangeMessage::_internal_replicaidx() const {
  return replicaidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoViewChangeMessage::replicaidx() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.DoViewChangeMessage.replicaIdx)
  return _internal_replicaidx();
}
inline void DoViewChangeMessage::_internal_set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  replicaidx_ = value;
}
inline void DoViewChangeMessage::set_replicaidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replicaidx(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.DoViewChangeMessage.replicaIdx)
}

// -------------------------------------------------------------------

// StartViewMessage_LogEntry

// required uint64 view = 1;
inline bool StartViewMessage_LogEntry::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StartViewMessage_LogEntry::has_view() const {
  return _internal_has_view();
}
inline void StartViewMessage_LogEntry::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage_LogEntry::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage_LogEntry::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.LogEntry.view)
  return _internal_view();
}
inline void StartViewMessage_LogEntry::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  view_ = value;
}
inline void StartViewMessage_LogEntry::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.LogEntry.view)
}

// required uint64 opnum = 2;
inline bool StartViewMessage_LogEntry::_internal_has_opnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StartViewMessage_LogEntry::has_opnum() const {
  return _internal_has_opnum();
}
inline void StartViewMessage_LogEntry::clear_opnum() {
  opnum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage_LogEntry::_internal_opnum() const {
  return opnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage_LogEntry::opnum() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.LogEntry.opnum)
  return _internal_opnum();
}
inline void StartViewMessage_LogEntry::_internal_set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  opnum_ = value;
}
inline void StartViewMessage_LogEntry::set_opnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opnum(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.LogEntry.opnum)
}

// required .replication.Request request = 3;
inline bool StartViewMessage_LogEntry::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool StartViewMessage_LogEntry::has_request() const {
  return _internal_has_request();
}
inline const ::replication::Request& StartViewMessage_LogEntry::_internal_request() const {
  const ::replication::Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::replication::Request*>(
      &::replication::_Request_default_instance_);
}
inline const ::replication::Request& StartViewMessage_LogEntry::request() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.LogEntry.request)
  return _internal_request();
}
inline void StartViewMessage_LogEntry::unsafe_arena_set_allocated_request(
    ::replication::Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:replication.vr.proto.StartViewMessage.LogEntry.request)
}
inline ::replication::Request* StartViewMessage_LogEntry::release_request() {
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::replication::Request* StartViewMessage_LogEntry::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.StartViewMessage.LogEntry.request)
  _has_bits_[0] &= ~0x00000002u;
  ::replication::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::replication::Request* StartViewMessage_LogEntry::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000002u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::replication::Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::replication::Request* StartViewMessage_LogEntry::mutable_request() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StartViewMessage.LogEntry.request)
  return _internal_mutable_request();
}
inline void StartViewMessage_LogEntry::set_allocated_request(::replication::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.StartViewMessage.LogEntry.request)
}

// optional uint32 state = 4;
inline bool StartViewMessage_LogEntry::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StartViewMessage_LogEntry::has_state() const {
  return _internal_has_state();
}
inline void StartViewMessage_LogEntry::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartViewMessage_LogEntry::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartViewMessage_LogEntry::state() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.LogEntry.state)
  return _internal_state();
}
inline void StartViewMessage_LogEntry::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  state_ = value;
}
inline void StartViewMessage_LogEntry::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.LogEntry.state)
}

// optional bytes hash = 5;
inline bool StartViewMessage_LogEntry::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartViewMessage_LogEntry::has_hash() const {
  return _internal_has_hash();
}
inline void StartViewMessage_LogEntry::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartViewMessage_LogEntry::hash() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.LogEntry.hash)
  return _internal_hash();
}
inline void StartViewMessage_LogEntry::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.LogEntry.hash)
}
inline std::string* StartViewMessage_LogEntry::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StartViewMessage.LogEntry.hash)
  return _internal_mutable_hash();
}
inline const std::string& StartViewMessage_LogEntry::_internal_hash() const {
  return hash_.Get();
}
inline void StartViewMessage_LogEntry::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartViewMessage_LogEntry::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replication.vr.proto.StartViewMessage.LogEntry.hash)
}
inline void StartViewMessage_LogEntry::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:replication.vr.proto.StartViewMessage.LogEntry.hash)
}
inline void StartViewMessage_LogEntry::set_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replication.vr.proto.StartViewMessage.LogEntry.hash)
}
inline std::string* StartViewMessage_LogEntry::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartViewMessage_LogEntry::release_hash() {
  // @@protoc_insertion_point(field_release:replication.vr.proto.StartViewMessage.LogEntry.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartViewMessage_LogEntry::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replication.vr.proto.StartViewMessage.LogEntry.hash)
}

// -------------------------------------------------------------------

// StartViewMessage

// required uint64 view = 1;
inline bool StartViewMessage::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartViewMessage::has_view() const {
  return _internal_has_view();
}
inline void StartViewMessage::clear_view() {
  view_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::view() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.view)
  return _internal_view();
}
inline void StartViewMessage::_internal_set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  view_ = value;
}
inline void StartViewMessage::set_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.view)
}

// required uint64 lastOp = 2;
inline bool StartViewMessage::_internal_has_lastop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StartViewMessage::has_lastop() const {
  return _internal_has_lastop();
}
inline void StartViewMessage::clear_lastop() {
  lastop_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::_internal_lastop() const {
  return lastop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::lastop() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.lastOp)
  return _internal_lastop();
}
inline void StartViewMessage::_internal_set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lastop_ = value;
}
inline void StartViewMessage::set_lastop(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastop(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.lastOp)
}

// required uint64 lastCommitted = 3;
inline bool StartViewMessage::_internal_has_lastcommitted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StartViewMessage::has_lastcommitted() const {
  return _internal_has_lastcommitted();
}
inline void StartViewMessage::clear_lastcommitted() {
  lastcommitted_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::_internal_lastcommitted() const {
  return lastcommitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StartViewMessage::lastcommitted() const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.lastCommitted)
  return _internal_lastcommitted();
}
inline void StartViewMessage::_internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lastcommitted_ = value;
}
inline void StartViewMessage::set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastcommitted(value);
  // @@protoc_insertion_point(field_set:replication.vr.proto.StartViewMessage.lastCommitted)
}

// repeated .replication.vr.proto.StartViewMessage.LogEntry entries = 4;
inline int StartViewMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int StartViewMessage::entries_size() const {
  return _internal_entries_size();
}
inline void StartViewMessage::clear_entries() {
  entries_.Clear();
}
inline ::replication::vr::proto::StartViewMessage_LogEntry* StartViewMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:replication.vr.proto.StartViewMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StartViewMessage_LogEntry >*
StartViewMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:replication.vr.proto.StartViewMessage.entries)
  return &entries_;
}
inline const ::replication::vr::proto::StartViewMessage_LogEntry& StartViewMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::replication::vr::proto::StartViewMessage_LogEntry& StartViewMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:replication.vr.proto.StartViewMessage.entries)
  return _internal_entries(index);
}
inline ::replication::vr::proto::StartViewMessage_LogEntry* StartViewMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::replication::vr::proto::StartViewMessage_LogEntry* StartViewMessage::add_entries() {
  // @@protoc_insertion_point(field_add:replication.vr.proto.StartViewMessage.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replication::vr::proto::StartViewMessage_LogEntry >&
StartViewMessage::entries() const {
  // @@protoc_insertion_point(field_list:replication.vr.proto.StartViewMessage.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace vr
}  // namespace replication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vr_2dproto_2eproto
